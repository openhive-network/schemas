from __future__ import annotations

import logging
import re
from pathlib import Path
from typing import Final

from schemas.operations.extensions import __all__ as all_operations

FILE_PATH: Final[Path] = Path(__file__).parent / "representation_types.py"


def delete_existing_model_file() -> None:
    if FILE_PATH.exists():
        FILE_PATH.unlink()


def ignore_liners_and_add_automation_generation_information(code: str) -> str:
    code += "# fmt: off\n\n"
    code += """# WARNING: This code was automatically generated by a script.\n# DO NOT EDIT this file manually, as any changes may be overwritten.\n# If modifications are needed, please update the generating script instead.\n\n"""
    return code


def collect_and_write_api_imports(code: str) -> str:
    code += "from __future__ import annotations\n\n"
    code += "from schemas.operations.extensions.comment_options_extensions import CommentPayoutBeneficiaries\n"
    code += "from schemas.operations.extensions.recurrent_transfer_extensions import RecurrentTransferPairId\n"
    code += "from schemas.operations.extensions.update_proposal_extensions import UpdateProposalEndDate\n"
    code += "from schemas.operations.representation_types import HF26Representation, LegacyRepresentation\n"
    code += "\n\n"
    return code


def write_representations_classes(code: str) -> str:
    for operation_name in all_operations[0:3]:
        if "Generic" not in operation_name:
            code += f"""class HF26Representation{operation_name}OperationExtension(HF26Representation, tag={operation_name}.get_name_with_suffix()):
            value: {operation_name}\n\n\n"""

            code += f"""class LegacyRepresentation{operation_name}OperationExtension(LegacyRepresentation, tag={operation_name}.get_name(), array_like=True):
            value: {operation_name[:-6] if "Legacy" in operation_name else operation_name}\n\n\n"""
    return code


def pascal_to_snake(text: str) -> str:
    snake = re.sub(r"(?<!^)(?=[A-Z])", "_", text)
    return snake.lower()


def generate_json_rpc_models_content() -> str:
    code = ""
    code = ignore_liners_and_add_automation_generation_information(code)
    code = collect_and_write_api_imports(code)
    return write_representations_classes(code)


def write_generated_models_to_file(code: str) -> None:
    with FILE_PATH.open("w") as file:
        file.write(code)


if __name__ == "__main__":
    delete_existing_model_file()
    code = generate_json_rpc_models_content()
    write_generated_models_to_file(code)
    logging.info("jsonrpc_models file overwrited")
