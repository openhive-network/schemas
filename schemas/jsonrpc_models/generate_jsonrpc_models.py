from __future__ import annotations

import ast
import logging
from pathlib import Path

FILE_PATH = Path(__file__).parent / "jsonrpc_models.py"
APIS_DIRECTORY = Path(__file__).parent.parent / "apis"


def delete_existing_model_file() -> None:
    if FILE_PATH.exists():
        FILE_PATH.unlink()


def ignore_liners_and_add_automation_generation_information(code: str) -> str:
    code += "# fmt: off\n\n"
    code += """# WARNING: This code was automatically generated by a script.\n# DO NOT EDIT this file manually, as any changes may be overwritten.\n# If modifications are needed, please update the generating script instead.\n\n"""
    return code


def collect_and_write_api_imports(code: str) -> tuple[str, list[str]]:
    api_folders: list[str] = []

    for api_folder in APIS_DIRECTORY.iterdir():
        if api_folder.is_dir() and "__pycache__" not in api_folder.as_posix():
            api_folders.append(str(api_folder.name))
    api_folders.sort()
    code += "from __future__ import annotations\n\n"
    code += "from typing import Generic, TypeVar, cast\n\n"
    code += "from schemas.apis import (\n"
    for folder in api_folders:
        code += f"    {folder},\n"
    code += ")\n"
    code += "from schemas.jsonrpc_constants import JSONRPCBase"
    code += """
"""
    code += '\n__all__ = ("ExpectResultT", "JSONRPCResult", "AllowedModelsAsResultT")\n\n\n'

    return code, api_folders


def extract_exported_models_from_api(api_name: str) -> list[str]:
    init_file_path = APIS_DIRECTORY / api_name / "__init__.py"

    if not init_file_path.exists():
        raise FileNotFoundError(f"Missing file {init_file_path}.")

    with init_file_path.open("r") as file:
        file_content = file.read()

    tree = ast.parse(file_content)

    for node in tree.body:
        if isinstance(node, ast.Assign):
            for target in node.targets:
                if isinstance(target, ast.Name) and target.id == "__all__" and isinstance(node.value, ast.List):
                    methods = [elt.s for elt in node.value.elts if isinstance(elt, ast.Str)]
                    return sorted(methods)
    raise ValueError(f"Missing __all__ in  {init_file_path}.")


def convert_to_pascal_case(name: str) -> str:
    return "".join(word.title() for word in name.split("_"))


def generate_and_write_jsonrpc_models(code: str, api_names: list[str]) -> str:
    classes_code = ""
    allowed_models_as_result_union = "AllowedModelsAsResultT = (\n"

    for i, api in enumerate(api_names):
        for j, model in enumerate(extract_exported_models_from_api(api)):
            class_name = f"{convert_to_pascal_case(api)}{model}JSONRPCBase"
            classes_code += f"class {class_name}(JSONRPCResult[{api}.{model}]):\n    result: {api}.{model}\n\n\n"
            allowed_models_as_result_union += "    " + ("" if i == 0 and j == 0 else "| ") + f"{api}.{model}\n"

    code += allowed_models_as_result_union + ")"
    code += """

ExpectResultT = TypeVar("ExpectResultT", bound=AllowedModelsAsResultT)


class JSONRPCResult(JSONRPCBase, Generic[ExpectResultT]):
    result: ExpectResultT


"""
    code += classes_code
    return code


def generate_get_jsonrpc_response_types_name_function(code: str) -> str:
    function = """def get_jsonrpc_response_types_name(expected_model: type[ExpectResultT], endpoint: str) -> type:
    def convert_to_pascal_case(name: str) -> str:
        return "".join(word.title() for word in name.split("_"))

    api_name, class_name = endpoint.split(sep=".")
    if "EmptyResponse" in str(expected_model):
        jsonrpc_model_name = "BeekeeperApiEmptyResponseJSONRPCBase"
    else:
        jsonrpc_model_name = f"{convert_to_pascal_case(api_name)}{convert_to_pascal_case(class_name)}JSONRPCBase"

    jsonrpc_model = globals().get(jsonrpc_model_name)
    assert jsonrpc_model is not None, f"Missing model for: {endpoint}"
    return cast(type, jsonrpc_model)\n"""
    code += function
    return code


def generate_json_rpc_models_content() -> str:
    code = ""
    code = ignore_liners_and_add_automation_generation_information(code)
    code, api_module_names = collect_and_write_api_imports(code)
    code = generate_and_write_jsonrpc_models(code, api_module_names)
    return generate_get_jsonrpc_response_types_name_function(code)


def write_generated_models_to_file(code: str) -> None:
    with FILE_PATH.open("w") as file:
        file.write(code)


if __name__ == "__main__":
    delete_existing_model_file()
    code = generate_json_rpc_models_content()
    write_generated_models_to_file(code)
    logging.info("jsonrpc_models file overwrited")
